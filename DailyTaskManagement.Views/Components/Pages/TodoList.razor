@page "/"
@using DailyTaskManagement.Application.DTOs
@using DailyTaskManagement.Application.Services.TodoItem
@inject ITodoItemService todoService

<h3>Todo List</h3>

@if (todoItems == null)
{
    <p>Loading...</p>
}
else if (todoItems.Count == 0)
{
    <p>No items found.</p>
}
else
{
    <div class="todo-container">
        <!-- New -->
        <div class="todo-column"
             ondragover="event.preventDefault()"
             ondrop="OnDrop(event, 'New')">
            <h4>New</h4>
            <ul>
                @foreach (var todo in todoItems.Where(t => t.ItemStatus == "New"))
                {
                    <li draggable="true"
                        ondragstart="OnDragStart(event, @todo.Id)">
                        @todo.ItemName
                    </li>
                }
            </ul>
        </div>

        <!-- Active -->
        <div class="todo-column"
             ondragover="event.preventDefault()"
             ondrop="OnDrop(event, 'Active')">
            <h4>Active</h4>
            <ul>
                @foreach (var todo in todoItems.Where(t => t.ItemStatus == "Active"))
                {
                    <li draggable="true"
                        ondragstart="OnDragStart(event, @todo.Id)">
                        @todo.ItemName
                    </li>
                }
            </ul>
        </div>

        <!-- Completed -->
        <div class="todo-column"
             ondragover="event.preventDefault()"
             ondrop="OnDrop(event, 'Completed')">
            <h4>Completed</h4>
            <ul>
                @foreach (var todo in todoItems.Where(t => t.ItemStatus == "Completed"))
                {
                    <li draggable="true"
                        ondragstart="OnDragStart(event, @todo.Id)">
                        @todo.ItemName
                    </li>
                }
            </ul>
        </div>
    </div>
}

@code {
    private List<TodoItemDto> todoItems;

    protected override async Task OnInitializedAsync()
    {
        todoItems = await todoService.GetAllTodoItemAsync();
    }

    private string draggedItemId;

    private void OnDragStart(DragEventArgs e, string id)
    {
        draggedItemId = id;
    }

    private void OnDrop(DragEventArgs e, string newStatus)
    {
        var item = todoItems.FirstOrDefault(t => t.Id == draggedItemId);
        if (item != null)
        {
            item.ItemStatus = newStatus;
        }
        draggedItemId = ""; // Reset dragged item
    }
}

<style>
    .todo-container {
        display: flex;
        justify-content: space-around;
        position: relative; /* Để pseudo-element hoạt động */
    }

    .todo-column {
        flex: 1;
        margin: 10px;
        padding: 10px;
        text-align: center;
        position: relative;
    }

        /* Đường kẻ dọc */
        .todo-column:not(:last-child)::after {
            content: "";
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            width: 1px;
            background-color: #ccc;
        }
    h4 {
        text-align: center;
        border-bottom: 2px solid #ccc;
        margin-bottom: 10px;
        padding-bottom: 5px;
    }

    ul {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    li {
        margin: 5px 0;
        padding: 5px;
        border: 1px solid #ddd;
        border-radius: 4px;
        background-color: #f9f9f9;
    }

        li:hover {
            background-color: #f0f0f0;
        }

    .todo-container {
        display: flex;
        justify-content: space-around;
        gap: 10px;
    }

    .todo-column {
        flex: 1;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
        min-height: 150px;
    }

        .todo-column:hover {
            background-color: #e8e8e8;
        }

    li {
        margin: 5px 0;
        padding: 5px;
        border: 1px solid #ddd;
        border-radius: 4px;
        background-color: #ffffff;
        cursor: grab;
    }

        li:active {
            cursor: grabbing;
            opacity: 0.8;
        }
</style>

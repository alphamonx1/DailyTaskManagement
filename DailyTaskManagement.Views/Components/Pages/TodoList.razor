@page "/"
@using DailyTaskManagement.Application.DTOs.TodoItem
@using DailyTaskManagement.Application.Services.TodoItem

@inject ITodoItemService todoService

<h3>Task Board</h3>

@if (todoItems == null)
{
    <p>Loading...</p>
}
else if (todoItems.Count == 0)
{
    <p>No items found.</p>
}
else
{
    <div class="todo-container">
        <!-- New -->
        <div class="todo-column">
            <h4 class="text-neutral-700">New</h4>
            <ul>
                @foreach (var todo in todoItems.Where(t => t.ItemStatus == "New"))
                {
                    <li draggable="true">
                        @todo.ItemName <br />
                        <MudButton @onclick="() => StartDoingTaskAsync(todo)">Start</MudButton>
                    </li>

                }
            </ul>
        </div>

        <!-- Active -->
        <div class="todo-column">
            <h4>Active</h4>
            <ul>
                @foreach (var todo in todoItems.Where(t => t.ItemStatus == "Active"))
                {
                    <li draggable="true">
                        @todo.ItemName <br />
                        <MudButton @onclick="() => StopDoingTaskAsync(todo)">Stop</MudButton>
                        <MudButton @onclick="() => CompleteTaskAsync(todo)">Done</MudButton>
                    </li>

                }
            </ul>
        </div>

        <!-- Completed -->
        <div class="todo-column">
            <h4>Completed</h4>
            <ul>
                @foreach (var todo in todoItems.Where(t => t.ItemStatus == "Completed"))
                {
                    <li draggable="true">
                        @todo.ItemName <br />
                        <MudButton @onclick="() => StopDoingTaskAsync(todo)">Back</MudButton>
                    </li>

                }
            </ul>
        </div>
    </div>
}

@code {
    private List<TodoItemDto> todoItems;

    protected override async Task OnInitializedAsync()
    {
        todoItems = await todoService.GetAllTodoItemAsync();
    }

    public async Task<int> StartDoingTaskAsync(TodoItemDto todoItemDto)
    {
        var result = await todoService.UpdateTodoItemStatusByIdAsync(todoItemDto.Id, 2);
        await RefreshDataAsync();
        return result;
    }

    public async Task<int> StopDoingTaskAsync(TodoItemDto todoItemDto)
    {
        var result = await todoService.UpdateTodoItemStatusByIdAsync(todoItemDto.Id, 1);
        await RefreshDataAsync();
        return result;
    }

    public async Task<int> CompleteTaskAsync(TodoItemDto todoItemDto)
    {
        var result = await todoService.UpdateTodoItemStatusByIdAsync(todoItemDto.Id, 3);
        await RefreshDataAsync(); ;
        return result;
    }

    private async Task RefreshDataAsync()
    {
        todoItems = await todoService.GetAllTodoItemAsync();
        StateHasChanged();
    }
}



<style>
    .todo-container {
        display: flex;
        justify-content: space-around;
        gap: 10px;
    }

    .todo-column {
        flex: 1;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
        min-height: 150px;
        transition: background-color 0.3s ease;
    }

        .todo-column:hover {
            background-color: #e8e8e8;
        }

        .todo-column ul {
            list-style: none;
            padding: 0;
        }

        .todo-column li {
            padding: 10px;
            margin: 5px 0;
            background: #fff;
            border: 1px solid #ddd;
            border-radius: 4px;
            cursor: grab;
        }

            .todo-column li:active {
                cursor: grabbing;
                opacity: 0.7;
            }

    .todo-column {
        transition: background-color 0.3s ease;
    }

        .todo-column.drag-over {
            background-color: #d1ffd6;
</style>
